/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.java.ondc.api;

import com.java.ondc.model.InlineObject;
import com.java.ondc.model.InlineObject1;
import com.java.ondc.model.InlineObject2;
import com.java.ondc.model.InlineObject3;
import com.java.ondc.model.InlineObject4;
import com.java.ondc.model.InlineObject5;
import com.java.ondc.model.InlineObject6;
import com.java.ondc.model.InlineObject7;
import com.java.ondc.model.InlineObject8;
import com.java.ondc.model.InlineObject9;
import com.java.ondc.model.InlineResponse200;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "OndcSellerApp", description = "the OndcSellerApp API")
public interface OndcSellerAppApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /cancel
     * Cancel an order
     *
     * @param inlineObject6  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "cancelPost", notes = "Cancel an order", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Seller App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/cancel",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> cancelPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject6 inlineObject6) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /confirm
     * Initialize an order by providing billing and/or shipping details
     *
     * @param inlineObject3  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "confirmPost", notes = "Initialize an order by providing billing and/or shipping details", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Seller App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/confirm",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> confirmPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject3 inlineObject3) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /init
     * Initialize an order by providing billing and/or shipping details
     *
     * @param inlineObject2  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "initPost", notes = "Initialize an order by providing billing and/or shipping details", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Seller App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/init",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> initPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject2 inlineObject2) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rating
     * Provide feedback on a service
     *
     * @param inlineObject8  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "ratingPost", notes = "Provide feedback on a service", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Seller App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/rating",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> ratingPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject8 inlineObject8) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /search
     * Search for services by intent
     *
     * @param inlineObject  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "searchPost", notes = "Search for services by intent", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Seller App","ONDC Gateway", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> searchPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject inlineObject) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /select
     * Select items from the catalog and build your order
     *
     * @param inlineObject1  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "selectPost", notes = "Select items from the catalog and build your order", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Seller App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/select",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> selectPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject1 inlineObject1) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /status
     * Fetch the latest order object
     *
     * @param inlineObject4  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "statusPost", notes = "Fetch the latest order object", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Seller App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> statusPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject4 inlineObject4) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /support
     * Contact support
     *
     * @param inlineObject9  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "supportPost", notes = "Contact support", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Seller App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/support",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> supportPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject9 inlineObject9) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /track
     * Track an active order
     *
     * @param inlineObject5  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "trackPost", notes = "Track an active order", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Seller App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/track",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> trackPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject5 inlineObject5) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /update
     * Update an order
     *
     * @param inlineObject7  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "updatePost", notes = "Update an order", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Seller App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> updatePost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject7 inlineObject7) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
