/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.java.ondc.api;

import com.java.ondc.model.InlineObject10;
import com.java.ondc.model.InlineObject11;
import com.java.ondc.model.InlineObject12;
import com.java.ondc.model.InlineObject13;
import com.java.ondc.model.InlineObject14;
import com.java.ondc.model.InlineObject15;
import com.java.ondc.model.InlineObject16;
import com.java.ondc.model.InlineObject17;
import com.java.ondc.model.InlineObject18;
import com.java.ondc.model.InlineObject19;
import com.java.ondc.model.InlineResponse200;
import com.java.ondc.model.InlineResponse2001;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "OndcBuyerApp", description = "the OndcBuyerApp API")
public interface OndcBuyerAppApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /on_cancel
     * Send cancellation request_id with reasons list in case of cancellation request. Else send cancelled order object
     *
     * @param inlineObject15  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "onCancelPost", notes = "Send cancellation request_id with reasons list in case of cancellation request. Else send cancelled order object", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Buyer App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/on_cancel",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> onCancelPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject15 inlineObject15) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /on_confirm
     * Send active order object
     *
     * @param inlineObject13  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "onConfirmPost", notes = "Send active order object", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Buyer App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/on_confirm",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> onConfirmPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject13 inlineObject13) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /on_init
     * Send order object with payment details updated
     *
     * @param inlineObject12  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "onInitPost", notes = "Send order object with payment details updated", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Buyer App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/on_init",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> onInitPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject12 inlineObject12) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /on_rating
     * Provide feedback on a service
     *
     * @param inlineObject18  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "onRatingPost", notes = "Provide feedback on a service", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Buyer App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/on_rating",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> onRatingPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject18 inlineObject18) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /on_search
     * Send catalog
     *
     * @param inlineObject10  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "onSearchPost", notes = "Send catalog", response = InlineResponse2001.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Buyer App","ONDC Gateway", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse2001.class) })
    @PostMapping(
        value = "/on_search",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse2001> onSearchPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject10 inlineObject10) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /on_select
     * Send draft order object with quoted price for selected items
     *
     * @param inlineObject11  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "onSelectPost", notes = "Send draft order object with quoted price for selected items", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Buyer App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/on_select",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> onSelectPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject11 inlineObject11) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /on_status
     * Fetch the status of a Service
     *
     * @param inlineObject17  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "onStatusPost", notes = "Fetch the status of a Service", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Buyer App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/on_status",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> onStatusPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject17 inlineObject17) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /on_support
     * Contact Support
     *
     * @param inlineObject19  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "onSupportPost", notes = "Contact Support", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Buyer App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/on_support",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> onSupportPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject19 inlineObject19) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /on_track
     * Send tracking details of an active order
     *
     * @param inlineObject14  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "onTrackPost", notes = "Send tracking details of an active order", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Buyer App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/on_track",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> onTrackPost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject14 inlineObject14) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /on_update
     * Returns updated service with updated runtime object
     *
     * @param inlineObject16  (optional)
     * @return Acknowledgement of message received (status code 200)
     */
    @ApiOperation(value = "", nickname = "onUpdatePost", notes = "Returns updated service with updated runtime object", response = InlineResponse200.class, authorizations = {
        
        @Authorization(value = "GatewaySubscriberAuth"),
        
        @Authorization(value = "GatewaySubscriberAuthNew"),
        
        @Authorization(value = "SubscriberAuth")
         }, tags={ "ONDC Buyer App", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Acknowledgement of message received", response = InlineResponse200.class) })
    @PostMapping(
        value = "/on_update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> onUpdatePost(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject16 inlineObject16) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : { \"ack\" : { \"status\" : \"ACK\" } }, \"error\" : { \"path\" : \"path\", \"code\" : \"code\", \"type\" : \"CONTEXT-ERROR\", \"message\" : \"message\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
